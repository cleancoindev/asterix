{"addr": "0x06012c8cf97BEaD5deAe237070F9587f8E7A266d", "ver": "17 Dec 12:00", "functions": [{"hash": "0x01ffc9a7", "name": "supportsInterface(bytes4 _interfaceId)", "color_name": "supportsInterface(bytes4 \u001b[32m_interfaceId\u001b[0m)", "abi_name": "supportsInterface(bytes4)", "shy_memory": false, "length": 1140, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msupportsInterface(bytes4 \u001b[32m_interfaceId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  if Mask(32, 224, \u001b[32m_interfaceId\u001b[0m)\u001b[1m == \u001b[0mMask(32, 224, sha3(Mask(200, 56, supportsInterface(bytes4)))):\n      return (Mask(32, 224, \u001b[32m_interfaceId\u001b[0m)\u001b[1m == \u001b[0mMask(32, 224, sha3(Mask(200, 56, supportsInterface(bytes4)))))\n  return (Mask(32, 224, \u001b[32m_interfaceId\u001b[0m)\u001b[1m == \u001b[0mMask(32, 224, (((((((((sha3(Mask(48, 208, name()))\u001b[1m xor \u001b[0msha3(Mask(64, 192, symbol())))\u001b[1m xor \u001b[0msha3(Mask(104, 152, totalSupply())))\u001b[1m xor \u001b[0msha3(Mask(144, 112, balanceOf(address))))\u001b[1m xor \u001b[0msha3(Mask(128, 128, ownerOf(uint256))))\u001b[1m xor \u001b[0msha3(Mask(192, 64, approve(address,uint256))))\u001b[1m xor \u001b[0msha3(Mask(200, 56, transfer(address,uint256))))\u001b[1m xor \u001b[0msha3(transferFrom(address,address,uin, Mask(40, 216, t256))))\u001b[1m xor \u001b[0msha3(Mask(176, 80, tokensOfOwner(address))))\u001b[1m xor \u001b[0msha3(Mask(232, 24, tokenMetadata(uint256,string))))))", "trace": [["IF", ["EQ", ["MASK_SHL", 32, 224, 0, ["cd", 4]], ["MASK_SHL", 32, 224, 0, ["SHA3", ["MASK_SHL", 200, 56, 0, "supportsInterface(bytes4)"]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 32, 224, 0, ["cd", 4]], ["MASK_SHL", 32, 224, 0, ["SHA3", ["MASK_SHL", 200, 56, 0, "supportsInterface(bytes4)"]]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 32, 224, 0, ["cd", 4]], ["MASK_SHL", 32, 224, 0, ["XOR", ["XOR", ["XOR", ["XOR", ["XOR", ["XOR", ["XOR", ["XOR", ["XOR", ["SHA3", ["MASK_SHL", 48, 208, 0, "name()"]], ["SHA3", ["MASK_SHL", 64, 192, 0, "symbol()"]]], ["SHA3", ["MASK_SHL", 104, 152, 0, "totalSupply()"]]], ["SHA3", ["MASK_SHL", 144, 112, 0, "balanceOf(address)"]]], ["SHA3", ["MASK_SHL", 128, 128, 0, "ownerOf(uint256)"]]], ["SHA3", ["MASK_SHL", 192, 64, 0, "approve(address,uint256)"]]], ["SHA3", ["MASK_SHL", 200, 56, 0, "transfer(address,uint256)"]]], ["SHA3", ["MASK_SHL", 256, 0, 0, "transferFrom(address,address,uin"], ["MASK_SHL", 40, 216, 0, "t256)"]]], ["SHA3", ["MASK_SHL", 176, 80, 0, "tokensOfOwner(address)"]]], ["SHA3", ["MASK_SHL", 232, 24, 0, "tokenMetadata(uint256,string)"]]]]]]]]]]}, {"hash": "0x0519ce79", "name": "cfoAddress()", "color_name": "cfoAddress()", "abi_name": "cfoAddress()", "shy_memory": false, "length": 61, "getter": ["STORAGE", 160, 0, 1], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcfoAddress() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mcfoAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]]]]}, {"hash": "0x0560ff44", "name": "tokenMetadata(uint256 _tokenId, string _preferredTransport)", "color_name": "tokenMetadata(uint256 \u001b[32m_tokenId\u001b[0m, string \u001b[32m_preferredTransport\u001b[0m)", "abi_name": "tokenMetadata(uint256,string)", "shy_memory": true, "length": 1509, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mtokenMetadata(uint256 \u001b[32m_tokenId\u001b[0m, string \u001b[32m_preferredTransport\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 128\n  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 256\n  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m160\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m192\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m224\u001b[95m]\u001b[0m = 0\n  require \u001b[32merc721MetadataAddress\u001b[0m\n  \u001b[95mmem[\u001b[0m416\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m256\u001b[95m]\u001b[0m = 0xcb4799f200000000000000000000000000000000000000000000000000000000\n  \u001b[95mmem[\u001b[0m260\u001b[95m]\u001b[0m = \u001b[32m_tokenId\u001b[0m\n  \u001b[95mmem[\u001b[0m292\u001b[95m]\u001b[0m = 64\n  \u001b[95mmem[\u001b[0m324\u001b[95m]\u001b[0m = \u001b[32m_preferredTransport.length\u001b[0m\n  require ext_code.size(\u001b[32merc721MetadataAddress\u001b[0m)\n  call \u001b[32merc721MetadataAddress\u001b[0m.3410467314 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32m_tokenId\u001b[0m, 64, \u001b[32m_preferredTransport.length\u001b[0m, calldata[36 + CALLDATASIZE - \u001b[32m_preferredTransport.length\u001b[0m + \u001b[32m_preferredTransport\u001b[0m len -36 + \u001b[32m_preferredTransport.length\u001b[0m - \u001b[32m_preferredTransport\u001b[0m]\n  require ext_call.success\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 416\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 448\n  \u001b[95mmem[\u001b[0m416\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 480\n  \u001b[95mmem[\u001b[0m448\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m = ext_call.return_data\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = Mask(251, 5, (ext_call.return_data + 31)) + 512\n  \u001b[94mvar4\u001b[0m = 512\n  \u001b[94mvar3\u001b[0m = 256\n  \u001b[94mvar2\u001b[0m = ext_call.return_data\n  while \u001b[94mvar2\u001b[0m\u001b[1m >= \u001b[0m32\u001b[32m:\u001b[0m\n      \u001b[95mmem[\u001b[0m\u001b[94mvar4\u001b[0m\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar3\u001b[0m\u001b[95m]\u001b[0m\n      \u001b[94mvar4\u001b[0m = \u001b[94mvar4\u001b[0m + 32\n      \u001b[94mvar3\u001b[0m = \u001b[94mvar3\u001b[0m + 32\n      \u001b[94mvar2\u001b[0m = \u001b[94mvar2\u001b[0m - 32\n  \u001b[95mmem[\u001b[0m\u001b[94mvar4\u001b[0m\u001b[95m]\u001b[0m = Mask(((-8\u001b[1m * \u001b[0m\u001b[94mvar2\u001b[0m) + 256), (8\u001b[1m * \u001b[0m\u001b[94mvar2\u001b[0m), \u001b[95mmem[\u001b[0m\u001b[94mvar4\u001b[0m\u001b[95m]\u001b[0m)\u001b[1m or \u001b[0mMask((8\u001b[1m * \u001b[0m\u001b[94mvar2\u001b[0m), 0, \u001b[95mmem[\u001b[0m\u001b[94mvar3\u001b[0m\u001b[95m]\u001b[0m)\n  \u001b[95mmem[\u001b[0m\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\u001b[95m]\u001b[0m = 32\n  \u001b[95mmem[\u001b[0m\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m\n  \u001b[94mvar1\u001b[0m = 0\n  while \u001b[94mvar1\u001b[0m\u001b[1m < \u001b[0m\u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m\u001b[32m:\u001b[0m\n      \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 64\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 512\u001b[95m]\u001b[0m\n      \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 32\n  if not (mem[480] % 32):\n      return\n        from \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\n         \u001b[93mlen\u001b[0m \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m + 64\n  \u001b[95mmem[\u001b[0mMask(251, 5, \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m) + \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 64\u001b[95m]\u001b[0m = Mask((8\u001b[1m * \u001b[0m(mem[480] % 32)), 0, \u001b[95mmem[\u001b[0mMask(251, 5, \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m) + \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 64\u001b[95m]\u001b[0m)\n  return\n    from \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\n     \u001b[93mlen\u001b[0m Mask(251, 5, \u001b[95mmem[\u001b[0m480\u001b[95m]\u001b[0m) + 96", "trace": [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 13]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 13]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 13]], 0, 256, ["ADD", 100, ["MUL", 1, ["cd", ["ADD", 4, ["MUL", 1, ["cd", 36]]]]]], 256, 160, 3410467314, ["DATA", ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, 64], ["MASK_SHL", 256, 0, 0, ["cd", ["ADD", 4, ["MUL", 1, ["cd", 36]]]]], ["MASK_SHL", ["ADD", -288, ["MUL", 8, ["cd", ["ADD", 4, ["MUL", 1, ["cd", 36]]]]], ["MUL", -8, ["cd", 36]]], 0, 0, "call.data"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["setvar", 4, 512], ["setvar", 3, 256], ["setvar", 2, "ext_call.return_data"], ["WHILE", ["GE", ["var", 2], 32], [["SETMEM", ["var", 4], ["mem", ["var", 3]]], ["setvar", 4, ["ADD", 32, ["MUL", 1, ["var", 4]]]], ["setvar", 3, ["ADD", 32, ["MUL", 1, ["var", 3]]]], ["setvar", 2, ["ADD", -32, ["MUL", 1, ["var", 2]]]]]], ["setvar", 1, 0], ["WHILE", ["LT", ["var", 1], ["mem", 480]], [["SETMEM", ["ADD", 64, ["MUL", 1, ["var", 1]], ["MUL", 1, ["mem", 64]]], ["mem", ["ADD", 512, ["MUL", 1, ["var", 1]]]]], ["setvar", 1, ["ADD", 32, ["MUL", 1, ["var", 1]]]]]], ["IF", ["ISZERO", ["MASK_SHL", 5, 0, 0, ["mem", 480]]], [["RETURN", ["mem", ["mem", 64], ["ADD", 64, ["MUL", 1, ["mem", 480]]]]]], [["RETURN", ["mem", ["mem", 64], ["ADD", 96, ["MUL", 1, ["MASK_SHL", 251, 5, 0, ["mem", 480]]]]]]]]]]]]]]]}, {"hash": "0x05e45546", "name": "promoCreatedCount()", "color_name": "promoCreatedCount()", "abi_name": "promoCreatedCount()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 256, 0, 17], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mpromoCreatedCount() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mpromoCreatedCount\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 17]]]]}, {"hash": "0x06fdde03", "name": "name()", "color_name": "name()", "abi_name": "name()", "shy_memory": false, "length": 124, "getter": null, "const": [["DATA", ["MASK_SHL", 256, 0, 0, 32], ["MASK_SHL", 256, 0, 0, 13], ["MASK_SHL", 104, 152, 0, "CryptoKitties"]]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0mname() = \u001b[1m'CryptoKitties'\u001b[0m", "trace": [["RETURN", ["DATA", ["MASK_SHL", 256, 0, 0, 32], ["MASK_SHL", 256, 0, 0, 13], ["MASK_SHL", 104, 152, 0, "CryptoKitties"]]]]}, {"hash": "0x095ea7b3", "name": "approve(address _spender, uint256 _value)", "color_name": "approve(address \u001b[32m_spender\u001b[0m, uint256 \u001b[32m_value\u001b[0m)", "abi_name": "approve(address,uint256)", "shy_memory": false, "length": 575, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mapprove(address \u001b[32m_spender\u001b[0m, uint256 \u001b[32m_value\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_spender\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[38;5;8mlog 0x8c5be1e5, caller, addr(_spender), _value\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, "CALLER"], ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]]], 63486140976153616755203102783360879283472101686154884697241723088393386309925], ["STOP"]]]]]]}, {"hash": "0x0a0f8168", "name": "ceoAddress()", "color_name": "ceoAddress()", "abi_name": "ceoAddress()", "shy_memory": false, "length": 61, "getter": ["STORAGE", 160, 0, 0], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mceoAddress() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mceoAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]]]]}, {"hash": "0x0e583df0", "name": "GEN0_STARTING_PRICE()", "color_name": "GEN0_STARTING_PRICE()", "abi_name": "GEN0_STARTING_PRICE()", "shy_memory": false, "length": 56, "getter": null, "const": [["MASK_SHL", 256, 0, 0, 10000000000000000]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0mGEN0_STARTING_PRICE() = \u001b[1m10000000000000000\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, 10000000000000000]]]}, {"hash": "0x14001f4c", "name": "setSiringAuctionAddress(address _address)", "color_name": "setSiringAuctionAddress(address \u001b[32m_address\u001b[0m)", "abi_name": "setSiringAuctionAddress(address)", "shy_memory": false, "length": 532, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetSiringAuctionAddress(address \u001b[32m_address\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require ext_code.size(\u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m)\n  call \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m.1981353871 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success\n  require ext_call.return_data\n  \u001b[32msiringAuctionAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["cd", 4]], 0, 96, 4, 96, 32, 1981353871, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", "ext_call.return_data"], [["REVERT", 0]], [["STORE", 160, 0, 12, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]]]]]}, {"hash": "0x18160ddd", "name": "totalSupply()", "color_name": "totalSupply()", "abi_name": "totalSupply()", "shy_memory": false, "length": 162, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mtotalSupply() : \u001b[38;5;8m# not payable\u001b[0m\n  return (\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m - 1)", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]}, {"hash": "0x183a7947", "name": "pregnantKitties()", "color_name": "pregnantKitties()", "abi_name": "pregnantKitties()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 256, 0, 15], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mpregnantKitties() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mpregnantKitties\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 15]]]]}, {"hash": "0x1940a936", "name": "isPregnant(uint256 _EtherDogId)", "color_name": "isPregnant(uint256 \u001b[32m_EtherDogId\u001b[0m)", "abi_name": "isPregnant(uint256)", "shy_memory": false, "length": 219, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0misPregnant(uint256 \u001b[32m_EtherDogId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32m_EtherDogId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  return bool(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m)", "trace": [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", ["BOOL", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]]}, {"hash": "0x19c2f201", "name": "GEN0_AUCTION_DURATION()", "color_name": "GEN0_AUCTION_DURATION()", "abi_name": "GEN0_AUCTION_DURATION()", "shy_memory": false, "length": 44, "getter": null, "const": [["MASK_SHL", 256, 0, 0, 86400]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0mGEN0_AUCTION_DURATION() = \u001b[1m86400\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, 86400]]]}, {"hash": "0x21717ebf", "name": "siringAuction()", "color_name": "siringAuction()", "abi_name": "siringAuction()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 160, 0, 12], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msiringAuction() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32msiringAuctionAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]]}, {"hash": "0x23b872dd", "name": "transferFrom(address _from, address _to, uint256 _value)", "color_name": "transferFrom(address \u001b[32m_from\u001b[0m, address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m)", "abi_name": "transferFrom(address,address,uint256)", "shy_memory": false, "length": 1721, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mtransferFrom(address \u001b[32m_from\u001b[0m, address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m != \u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n  \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  if \u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m:\n      \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m - 1\n      \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = 0\n      \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[38;5;8mlog 0xddf252ad, addr(_from), addr(_to), _value\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 36]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 160, 0, 0, "ADDRESS"]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 68]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 68]]]]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 68]]], ["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["cd", 68]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]], [["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 68]]], 0], ["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 68]]], 0], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["cd", 68]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]]]]]]]]]]]]}, {"hash": "0x24e7a38a", "name": "setGeneScienceAddress(address _address)", "color_name": "setGeneScienceAddress(address \u001b[32m_address\u001b[0m)", "abi_name": "setGeneScienceAddress(address)", "shy_memory": false, "length": 532, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetGeneScienceAddress(address \u001b[32m_address\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require ext_code.size(\u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m)\n  call \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m.1421958018 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success\n  require ext_call.return_data\n  \u001b[32mgeneScienceAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["cd", 4]], 0, 96, 4, 96, 32, 1421958018, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", "ext_call.return_data"], [["REVERT", 0]], [["STORE", 160, 0, 16, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]]]]]}, {"hash": "0x27d7874c", "name": "setCEO(address _newCEO)", "color_name": "setCEO(address \u001b[32m_newCEO\u001b[0m)", "abi_name": "setCEO(address)", "shy_memory": false, "length": 279, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetCEO(address \u001b[32m_newCEO\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCEO\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mceoAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCEO\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["STORE", 160, 0, 0, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]}, {"hash": "0x2ba73c15", "name": "setCOO(address _newCOO)", "color_name": "setCOO(address \u001b[32m_newCOO\u001b[0m)", "abi_name": "setCOO(address)", "shy_memory": false, "length": 279, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetCOO(address \u001b[32m_newCOO\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCOO\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCOO\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["STORE", 160, 0, 2, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]}, {"hash": "0x3d7d3f5a", "name": "createSaleAuction(uint256 _flowerId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration)", "color_name": "createSaleAuction(uint256 \u001b[32m_flowerId\u001b[0m, uint256 \u001b[32m_startingPrice\u001b[0m, uint256 \u001b[32m_endingPrice\u001b[0m, uint256 \u001b[32m_duration\u001b[0m)", "abi_name": "createSaleAuction(uint256,uint256,uint256,uint256)", "shy_memory": false, "length": 1062, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcreateSaleAuction(uint256 \u001b[32m_flowerId\u001b[0m, uint256 \u001b[32m_startingPrice\u001b[0m, uint256 \u001b[32m_endingPrice\u001b[0m, uint256 \u001b[32m_duration\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_flowerId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32m_flowerId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require not \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_flowerId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_flowerId\u001b[0m\u001b[32m]\u001b[0m = \u001b[32msaleAuctionAddress\u001b[0m\n  require ext_code.size(\u001b[32msaleAuctionAddress\u001b[0m)\n  call \u001b[32msaleAuctionAddress\u001b[0m.669770762 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32m_flowerId\u001b[0m, \u001b[32m_startingPrice\u001b[0m, \u001b[32m_endingPrice\u001b[0m, \u001b[32m_duration\u001b[0m, caller\n  require ext_call.success", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["BOOL", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]], ["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 96, 164, 96, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["cd", 68]], ["MASK_SHL", 256, 0, 0, ["cd", 100]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STOP"]]]]]]]]]]]]]]}, {"hash": "0x3f4ba83a", "name": "unpause()", "color_name": "unpause()", "abi_name": "unpause()", "shy_memory": false, "length": 838, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0munpause() : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32msaleAuctionAddress\u001b[0m\n  require \u001b[32msiringAuctionAddress\u001b[0m\n  require \u001b[32mgeneScienceAddress\u001b[0m\n  require not \u001b[32mnewContractAddress\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m = 0", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]]], [["REVERT", 0]], [["IF", ["BOOL", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 19]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["STORE", 8, 160, 2, [], 0], ["STOP"]]]]]]]]]]]]]]]]]]}, {"hash": "0x46116e6f", "name": "sireAllowedToAddress(uint256 _param1)", "color_name": "sireAllowedToAddress(uint256 \u001b[32m_param1\u001b[0m)", "abi_name": "sireAllowedToAddress(uint256)", "shy_memory": false, "length": 101, "getter": ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msireAllowedToAddress(uint256 \u001b[32m_param1\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_param1\u001b[0m\u001b[32m]\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]}, {"hash": "0x46d22c70", "name": "canBreedWith(uint256 _matronId, uint256 _sireId)", "color_name": "canBreedWith(uint256 \u001b[32m_matronId\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m)", "abi_name": "canBreedWith(uint256,uint256)", "shy_memory": false, "length": 4121, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcanBreedWith(uint256 \u001b[32m_matronId\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[32m_sireId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  if \u001b[32m_matronId\u001b[0m\u001b[1m == \u001b[0m\u001b[32m_sireId\u001b[0m:\n      return False\n  if \u001b[32m_sireId\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n      return False\n  if \u001b[32m_sireId\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m:\n      return False\n  if \u001b[32m_matronId\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n      return False\n  if \u001b[32m_matronId\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m:\n      return False\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n      if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n          if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n              return False\n          if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n              return False\n          if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m:\n              return False\n          if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\u001b[1m == \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m:\n              return False\n  if \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0m\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m:\n      return (\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0m\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m)\n  return (\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0m\u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m)", "trace": [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["EQ", ["cd", 4], ["cd", 36]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]]]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]]]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", 0]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, {"hash": "0x481af3d3", "name": "kittyIndexToApproved(uint256 _param1)", "color_name": "kittyIndexToApproved(uint256 \u001b[32m_param1\u001b[0m)", "abi_name": "kittyIndexToApproved(uint256)", "shy_memory": false, "length": 100, "getter": ["STORAGE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mkittyIndexToApproved(uint256 \u001b[32m_param1\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_param1\u001b[0m\u001b[32m]\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]}, {"hash": "0x4ad8c938", "name": "createSiringAuction(uint256 _EtherDogId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration)", "color_name": "createSiringAuction(uint256 \u001b[32m_EtherDogId\u001b[0m, uint256 \u001b[32m_startingPrice\u001b[0m, uint256 \u001b[32m_endingPrice\u001b[0m, uint256 \u001b[32m_duration\u001b[0m)", "abi_name": "createSiringAuction(uint256,uint256,uint256,uint256)", "shy_memory": false, "length": 1213, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcreateSiringAuction(uint256 \u001b[32m_EtherDogId\u001b[0m, uint256 \u001b[32m_startingPrice\u001b[0m, uint256 \u001b[32m_endingPrice\u001b[0m, uint256 \u001b[32m_duration\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_EtherDogId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32m_EtherDogId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require not \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m <= \u001b[0m\u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m\n  \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_EtherDogId\u001b[0m\u001b[32m]\u001b[0m = \u001b[32msiringAuctionAddress\u001b[0m\n  require ext_code.size(\u001b[32msiringAuctionAddress\u001b[0m)\n  call \u001b[32msiringAuctionAddress\u001b[0m.669770762 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32m_EtherDogId\u001b[0m, \u001b[32m_startingPrice\u001b[0m, \u001b[32m_endingPrice\u001b[0m, \u001b[32m_duration\u001b[0m, caller\n  require ext_call.success", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]], ["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 352, 164, 352, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["cd", 68]], ["MASK_SHL", 256, 0, 0, ["cd", 100]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STOP"]]]]]]]]]]]]]]]]}, {"hash": "0x4b85fd55", "name": "setAutoBirthFee(uint256 _val)", "color_name": "setAutoBirthFee(uint256 \u001b[32m_val\u001b[0m)", "abi_name": "setAutoBirthFee(uint256)", "shy_memory": false, "length": 180, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetAutoBirthFee(uint256 \u001b[32m_val\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\u001b[1m == \u001b[0mcaller\n  \u001b[32mautoBirthFee\u001b[0m = \u001b[32m_val\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STORE", 256, 0, 14, [], ["cd", 4]], ["STOP"]]]]}, {"hash": "0x4dfff04f", "name": "approveSiring(address _addr, uint256 _sireId)", "color_name": "approveSiring(address \u001b[32m_addr\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m)", "abi_name": "approveSiring(address,uint256)", "shy_memory": false, "length": 370, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mapproveSiring(address \u001b[32m_addr\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_addr\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]}, {"hash": "0x4e0a3379", "name": "setCFO(address _newCFO)", "color_name": "setCFO(address \u001b[32m_newCFO\u001b[0m)", "abi_name": "setCFO(address)", "shy_memory": false, "length": 279, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetCFO(address \u001b[32m_newCFO\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCFO\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mcfoAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_newCFO\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["STORE", 160, 0, 1, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]}, {"hash": "0x56129134", "name": "createPromoKitty(uint256 _genes, address _owner)", "color_name": "createPromoKitty(uint256 \u001b[32m_genes\u001b[0m, address \u001b[32m_owner\u001b[0m)", "abi_name": "createPromoKitty(uint256,address)", "shy_memory": false, "length": 8122, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcreatePromoKitty(uint256 \u001b[32m_genes\u001b[0m, address \u001b[32m_owner\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mpromoCreatedCount\u001b[0m\u001b[1m < \u001b[0m5000\n  \u001b[32mpromoCreatedCount\u001b[0m = \u001b[32mpromoCreatedCount\u001b[0m + 1\n  \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m = \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1\n  if not \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m <= \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1):\n      \u001b[94mvar1\u001b[0m = (2\u001b[1m * \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m) + sha3(6) + 2\n      while (sha3(6) + (\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[1m << \u001b[0m256))\u001b[1m > \u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m:\u001b[0m\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = 0\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = 0\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 2\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = \u001b[32m_genes\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = \u001b[38;5;8muint64(\u001b[0mblock.timestamp\u001b[38;5;8m)\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.96\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.128\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.addr\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.176\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.192\u001b[0m = 0\n  require \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m == \u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[38;5;8m)\u001b[0m\n  if \u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m:\n      \u001b[38;5;8mlog 0xa5311bd2, addr(_owner), stor6.length.0.uint256, 0, 0, _genes\u001b[0m\n      \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n      \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\n      \u001b[38;5;8mlog 0xddf252ad, 0, addr(_owner), stor6.length.0.uint256\u001b[0m\n  else:\n      \u001b[38;5;8mlog 0xa5311bd2, cooAddress.addr, stor6.length.0.uint256, 0, 0, _genes\u001b[0m\n      \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n      \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[32m]\u001b[0m = \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\n      \u001b[38;5;8mlog 0xddf252ad, 0, cooAddress.addr, stor6.length.0.uint256\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["MASK_SHL", 160, 0, 0, ["cd", 36]], [["IF", ["GE", ["STORAGE", 256, 0, 17], 5000], [["REVERT", 0]], [["STORE", 256, 0, 17, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 17]]]], ["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 36]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["cd", 36]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["cd", 36]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]]]]]], [["IF", ["GE", ["STORAGE", 256, 0, 17], 5000], [["REVERT", 0]], [["STORE", 256, 0, 17, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 17]]]], ["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]]]]]]]]]]}, {"hash": "0x5663896e", "name": "setSecondsPerBlock(uint256 _secs)", "color_name": "setSecondsPerBlock(uint256 \u001b[32m_secs\u001b[0m)", "abi_name": "setSecondsPerBlock(uint256)", "shy_memory": false, "length": 762, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetSecondsPerBlock(uint256 \u001b[32m_secs\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  if \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m != caller:\n      if \u001b[32mceoAddress\u001b[0m != caller:\n          require \u001b[32mcfoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32m_secs\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor3\u001b[0m\n  \u001b[32msecondsPerBlock\u001b[0m = \u001b[32m_secs\u001b[0m", "trace": [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["GE", ["cd", 4], ["MASK_SHL", 32, 0, 0, ["STORAGE", 32, 0, 3]]], [["REVERT", 0]], [["STORE", 256, 0, 5, [], ["cd", 4]], ["STOP"]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["GE", ["cd", 4], ["MASK_SHL", 32, 0, 0, ["STORAGE", 32, 0, 3]]], [["REVERT", 0]], [["STORE", 256, 0, 5, [], ["cd", 4]], ["STOP"]]]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 4], ["MASK_SHL", 32, 0, 0, ["STORAGE", 32, 0, 3]]], [["REVERT", 0]], [["STORE", 256, 0, 5, [], ["cd", 4]], ["STOP"]]]]]]]]]]}, {"hash": "0x5c975abb", "name": "paused()", "color_name": "paused()", "abi_name": "paused()", "shy_memory": false, "length": 99, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mpaused() : \u001b[38;5;8m# not payable\u001b[0m\n  return bool(\u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m)", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]]]]]}, {"hash": "0x5fd8c710", "name": "withdrawBalance()", "color_name": "withdrawBalance()", "abi_name": "withdrawBalance()", "shy_memory": false, "length": 703, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mwithdrawBalance() : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mcfoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  if eth.balance(this.address)\u001b[1m > \u001b[0m(\u001b[32mautoBirthFee\u001b[0m + (\u001b[32mpregnantKitties\u001b[0m\u001b[1m * \u001b[0m\u001b[32mautoBirthFee\u001b[0m)):\n      call \u001b[32mcfoAddress\u001b[0m with:\u001b[38;5;8m\t# withdraw / default function\u001b[0m\n           gas 2300\u001b[1m * \u001b[0mnot (eth.balance(this.address) - \u001b[32mautoBirthFee\u001b[0m - (\u001b[32mpregnantKitties\u001b[0m\u001b[1m * \u001b[0m\u001b[32mautoBirthFee\u001b[0m)) \u001b[38;5;8mwei\u001b[0m\n         value eth.balance(this.address) - \u001b[32mautoBirthFee\u001b[0m - (\u001b[32mpregnantKitties\u001b[0m\u001b[1m * \u001b[0m\u001b[32mautoBirthFee\u001b[0m) \u001b[38;5;8mwei\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["LE", ["BALANCE", "ADDRESS"], ["ADD", ["MUL", 1, ["STORAGE", 256, 0, 14]], ["MUL", 1, ["STORAGE", 256, 0, 15], ["STORAGE", 256, 0, 14]]]], [["STOP"]], [["CALL", ["MUL", 2300, ["ISZERO", ["ADD", ["MUL", 1, ["BALANCE", "ADDRESS"]], ["MUL", -1, ["STORAGE", 256, 0, 14]], ["MUL", -1, ["STORAGE", 256, 0, 15], ["STORAGE", 256, 0, 14]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]], ["ADD", ["MUL", 1, ["BALANCE", "ADDRESS"]], ["MUL", -1, ["STORAGE", 256, 0, 14]], ["MUL", -1, ["STORAGE", 256, 0, 15], ["STORAGE", 256, 0, 14]]], 96, 0, 96, 0, 0, 0], ["STOP"]]]]]]}, {"hash": "0x6352211e", "name": "ownerOf(uint256 _tokenId)", "color_name": "ownerOf(uint256 \u001b[32m_tokenId\u001b[0m)", "abi_name": "ownerOf(uint256)", "shy_memory": false, "length": 227, "getter": ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mownerOf(uint256 \u001b[32m_tokenId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_tokenId\u001b[0m\u001b[32m]\u001b[0m\n  return \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_tokenId\u001b[0m\u001b[32m]\u001b[0m", "trace": [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]}, {"hash": "0x680eba27", "name": "GEN0_CREATION_LIMIT()", "color_name": "GEN0_CREATION_LIMIT()", "abi_name": "GEN0_CREATION_LIMIT()", "shy_memory": false, "length": 44, "getter": null, "const": [["MASK_SHL", 256, 0, 0, 45000]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0mGEN0_CREATION_LIMIT() = \u001b[1m45000\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, 45000]]]}, {"hash": "0x6af04a57", "name": "newContractAddress()", "color_name": "newContractAddress()", "abi_name": "newContractAddress()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 160, 0, 19], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mnewContractAddress() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mnewContractAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 19]]]]}, {"hash": "0x6fbde40d", "name": "setSaleAuctionAddress(address _address)", "color_name": "setSaleAuctionAddress(address \u001b[32m_address\u001b[0m)", "abi_name": "setSaleAuctionAddress(address)", "shy_memory": false, "length": 532, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetSaleAuctionAddress(address \u001b[32m_address\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require ext_code.size(\u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m)\n  call \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m.2243453320 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success\n  require ext_call.return_data\n  \u001b[32msaleAuctionAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_address\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["cd", 4]], 0, 96, 4, 96, 32, 2243453320, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", "ext_call.return_data"], [["REVERT", 0]], [["STORE", 160, 0, 11, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]]]]]]]}, {"hash": "0x70a08231", "name": "balanceOf(address _owner)", "color_name": "balanceOf(address \u001b[32m_owner\u001b[0m)", "abi_name": "balanceOf(address)", "shy_memory": false, "length": 100, "getter": ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mbalanceOf(address \u001b[32m_owner\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]]]}, {"hash": "0x71587988", "name": "setNewAddress(address _v2Address)", "color_name": "setNewAddress(address \u001b[32m_v2Address\u001b[0m)", "abi_name": "setNewAddress(address)", "shy_memory": false, "length": 420, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetNewAddress(address \u001b[32m_v2Address\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  \u001b[32mnewContractAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_v2Address\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[38;5;8mlog 0x450db8da, addr(_v2Address)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["STORE", 160, 0, 19, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["LOG", ["MASK_SHL", 160, 0, 0, ["cd", 4]], 31233831374371665826611374285866042866574441000327759859770963170975177872133], ["STOP"]]]]]]}, {"hash": "0x7a7d4937", "name": "secondsPerBlock()", "color_name": "secondsPerBlock()", "abi_name": "secondsPerBlock()", "shy_memory": false, "length": 61, "getter": ["STORAGE", 256, 0, 5], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msecondsPerBlock() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32msecondsPerBlock\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 5]]]]}, {"hash": "0x8456cb59", "name": "pause()", "color_name": "pause()", "abi_name": "pause()", "shy_memory": false, "length": 954, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mpause() : \u001b[38;5;8m# not payable\u001b[0m\n  if \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m != caller:\n      if \u001b[32mceoAddress\u001b[0m != caller:\n          require \u001b[32mcfoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m = 1", "trace": [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["STORE", 8, 160, 2, [], ["MASK_SHL", 8, 160, -160, 1461501637330902918203684832716283019655932542976]], ["STOP"]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["STORE", 8, 160, 2, [], ["MASK_SHL", 8, 160, -160, 1461501637330902918203684832716283019655932542976]], ["STOP"]]]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["STORE", 8, 160, 2, [], ["MASK_SHL", 8, 160, -160, 1461501637330902918203684832716283019655932542976]], ["STOP"]]]]]]]]]]}, {"hash": "0x8462151c", "name": "tokensOfOwner(address _owner)", "color_name": "tokensOfOwner(address \u001b[32m_owner\u001b[0m)", "abi_name": "tokensOfOwner(address)", "shy_memory": true, "length": 3144, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mtokensOfOwner(address \u001b[32m_owner\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 128\n  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = 160\n  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = 0\n  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 8\n  if not \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m:\n      return ''\n  \u001b[95mmem[\u001b[0m160\u001b[95m]\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m\n  \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m = (\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 192\n  if 1\u001b[1m > \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m - 1):\n      \u001b[95mmem[\u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 192\u001b[95m]\u001b[0m = 32\n      \u001b[95mmem[\u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 224\u001b[95m]\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m\n      \u001b[94mvar1\u001b[0m = 0\n      while (\u001b[94mvar1\u001b[0m + 32)\u001b[1m < \u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256)\u001b[32m:\u001b[0m\n          \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + (\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 256\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 192\u001b[95m]\u001b[0m\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 32\n      \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + (\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 256\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 192\u001b[95m]\u001b[0m\n      return\n        from \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\n         \u001b[93mlen\u001b[0m (2\u001b[1m * \u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256)) + -\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 256\n  \u001b[94mvar2\u001b[0m = 0\n  \u001b[94mvar1\u001b[0m = 1\n  \u001b[32mloop 6390_8:1952\u001b[0m\n  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[94mvar1\u001b[0m\n  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 7\n  if \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m != \u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m:\n      if (\u001b[94mvar1\u001b[0m + 1)\u001b[1m <= \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m - 1):\n          \u001b[94mvar2\u001b[0m = \u001b[94mvar2\u001b[0m\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 1\n          \u001b[32mrepeat 6390_8:1952\u001b[0m\n      \u001b[95mmem[\u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 192\u001b[95m]\u001b[0m = 32\n      \u001b[95mmem[\u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 224\u001b[95m]\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m\n      \u001b[94mvar1\u001b[0m = 0\n      while (\u001b[94mvar1\u001b[0m + 32)\u001b[1m < \u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256)\u001b[32m:\u001b[0m\n          \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + (\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 256\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 192\u001b[95m]\u001b[0m\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 32\n      \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + (\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256) + 256\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 192\u001b[95m]\u001b[0m\n      return\n        from \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\n         \u001b[93mlen\u001b[0m (2\u001b[1m * \u001b[0m(\u001b[32mstor8\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.251\u001b[0m\u001b[1m << \u001b[0m256)) + -\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 256\n  require \u001b[94mvar2\u001b[0m\u001b[1m < \u001b[0m\u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m\n  \u001b[95mmem[\u001b[0m(32\u001b[1m * \u001b[0m\u001b[94mvar2\u001b[0m) + 192\u001b[95m]\u001b[0m = \u001b[94mvar1\u001b[0m\n  if (\u001b[94mvar1\u001b[0m + 1)\u001b[1m <= \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m - 1):\n      \u001b[94mvar2\u001b[0m = \u001b[94mvar2\u001b[0m + 1\n      \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 1\n      \u001b[32mrepeat 6390_8:1952\u001b[0m\n  \u001b[95mmem[\u001b[0m\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\u001b[95m]\u001b[0m = 32\n  \u001b[95mmem[\u001b[0m\u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m160\u001b[95m]\u001b[0m\n  \u001b[94mvar1\u001b[0m = 0\n  while \u001b[94mvar1\u001b[0m\u001b[1m < \u001b[0m(32\u001b[1m * \u001b[0m\u001b[95mmem[\u001b[0m160\u001b[95m]\u001b[0m)\u001b[32m:\u001b[0m\n      \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m + 64\u001b[95m]\u001b[0m = \u001b[95mmem[\u001b[0m\u001b[94mvar1\u001b[0m + 192\u001b[95m]\u001b[0m\n      \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 32\n  return\n    from \u001b[95mmem[\u001b[0m64\u001b[95m]\u001b[0m\n     \u001b[93mlen\u001b[0m (32\u001b[1m * \u001b[0m\u001b[95mmem[\u001b[0m160\u001b[95m]\u001b[0m) + 64", "trace": [["IF", ["ISZERO", ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]], [["RETURN", ["DATA", ["MASK_SHL", 256, 0, 0, 32], ["MASK_SHL", 256, 0, 0, 0]]]], [["IF", ["GT", 1, ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["setvar", 1, 0], ["WHILE", ["LT", ["ADD", 32, ["var", 1]], ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], [["SETMEM", ["ADD", 256, ["var", 1], ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], ["mem", ["ADD", 192, ["var", 1]]]], ["setvar", 1, ["ADD", 32, ["MUL", 1, ["var", 1]]]]]], ["RETURN", ["mem", ["mem", 64], ["ADD", 256, ["MUL", 2, ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], ["MUL", -1, ["mem", 64]]]]]], [["setvar", 2, 0], ["setvar", 1, 1], ["LOOP", [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["var", 1]]]]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["IF", ["GE", ["var", 2], ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]], [["INVALID"]], [["IF", ["GT", ["ADD", 1, ["MUL", 1, ["var", 1]]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["setvar", 1, 0], ["WHILE", ["LT", ["var", 1], ["MASK_SHL", 251, 0, 5, ["mem", 160]]], [["SETMEM", ["ADD", 64, ["MUL", 1, ["var", 1]], ["MUL", 1, ["mem", 64]]], ["mem", ["ADD", 192, ["MUL", 1, ["var", 1]]]]], ["setvar", 1, ["ADD", 32, ["MUL", 1, ["var", 1]]]]]], ["RETURN", ["mem", ["mem", 64], ["ADD", 64, ["MUL", 1, ["MASK_SHL", 251, 0, 5, ["mem", 160]]]]]]], [["setvar", 2, ["ADD", 1, ["MUL", 1, ["var", 2]]]], ["setvar", 1, ["ADD", 1, ["MUL", 1, ["var", 1]]]], ["END LOOP", "6390_8:1952", ["LE", ["ADD", 1, ["MUL", 1, ["var", 1]]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], {"2": ["ADD", 1, ["MUL", 1, ["var", 2]]], "1": ["ADD", 1, ["MUL", 1, ["var", 1]]]}]]]]]], [["IF", ["LE", ["ADD", 1, ["MUL", 1, ["var", 1]]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["setvar", 2, ["var", 2]], ["setvar", 1, ["ADD", 1, ["MUL", 1, ["var", 1]]]], ["END LOOP", "6390_8:1952", ["LE", ["ADD", 1, ["MUL", 1, ["var", 1]]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], {"2": ["var", 2], "1": ["ADD", 1, ["MUL", 1, ["var", 1]]]}]], [["setvar", 1, 0], ["WHILE", ["LT", ["ADD", 32, ["var", 1]], ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], [["SETMEM", ["ADD", 256, ["var", 1], ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], ["mem", ["ADD", 192, ["var", 1]]]], ["setvar", 1, ["ADD", 32, ["MUL", 1, ["var", 1]]]]]], ["RETURN", ["mem", ["mem", 64], ["ADD", 256, ["MUL", 2, ["MASK_SHL", 251, 0, 5, ["STORAGE", 251, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]], ["MUL", -1, ["mem", 64]]]]]]]]]], "6390_8:1952"]]]]]]}, {"hash": "0x88c2a0bf", "name": "giveBirth(uint256 _matronId)", "color_name": "giveBirth(uint256 \u001b[32m_matronId\u001b[0m)", "abi_name": "giveBirth(uint256)", "shy_memory": false, "length": 26851, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mgiveBirth(uint256 \u001b[32m_matronId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.0.uint64\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m <= \u001b[0m\u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require ext_code.size(\u001b[32mgeneScienceAddress\u001b[0m)\n  call \u001b[32mgeneScienceAddress\u001b[0m.228547309 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m, \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32)\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m, \u001b[38;5;8muint64(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m - 1)\u001b[38;5;8m)\u001b[0m\n  require ext_call.success\n  require \u001b[32m_matronId\u001b[0m\u001b[1m == \u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m = \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1\n  if not \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m <= \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1):\n      \u001b[94mvar1\u001b[0m = (2\u001b[1m * \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m) + sha3(6) + 2\n      while (sha3(6) + (\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[1m << \u001b[0m256))\u001b[1m > \u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m:\u001b[0m\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = 0\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = 0\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 2\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = ext_call.return_data\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = \u001b[38;5;8muint64(\u001b[0mblock.timestamp\u001b[38;5;8m)\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.384\u001b[0m = \u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.416\u001b[0m = \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.448\u001b[0m = 0\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m\u001b[1m <= \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m:\n      if (Mask(15, 1, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1))\u001b[1m >> \u001b[0m1)\u001b[1m > \u001b[0m13:\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.uint8\u001b[0m = 13\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.488\u001b[0m = 0\n      else:\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.15\u001b[0m = Mask(15, 1, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1))\u001b[1m >> \u001b[0m1\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.495\u001b[0m = 0\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.496\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  else:\n      if (Mask(15, 1, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1))\u001b[1m >> \u001b[0m1)\u001b[1m > \u001b[0m13:\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.uint8\u001b[0m = 13\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.488\u001b[0m = 0\n      else:\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.15\u001b[0m = Mask(15, 1, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1))\u001b[1m >> \u001b[0m1\n          \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.495\u001b[0m = 0\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.496\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m == \u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[38;5;8mlog 0xa5311bd2, ownerOf[_matronId], stor6.length.0.uint256, uint32(_matronId), (stor6[Mask(255, 0, _matronId)].192 << 32), ext_call.return_data[-32 + RETURNDATASIZE len 32]\u001b[0m\n  \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n  \u001b[38;5;8mlog 0xddf252ad, 0, ownerOf[_matronId], stor6.length.0.uint256\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.448\u001b[0m = 0\n  \u001b[32mpregnantKitties\u001b[0m = \u001b[32mpregnantKitties\u001b[0m - 1\n  call caller with:\u001b[38;5;8m\t# withdraw / default function\u001b[0m\n       gas 2300\u001b[1m * \u001b[0mnot \u001b[32mautoBirthFee\u001b[0m \u001b[38;5;8mwei\u001b[0m\n     value \u001b[32mautoBirthFee\u001b[0m \u001b[38;5;8mwei\u001b[0m\n  return \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["ISZERO", ["MASK_SHL", 64, 0, 0, ["STORAGE", 64, 0, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["GE", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["LE", ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]], ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]], 0, 352, 100, 352, 32, 228547309, ["DATA", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]], ["MASK_SHL", 64, 0, 0, ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["cd", 4], ["MASK_SHL", 32, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]], 13], [["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 8, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 8, 224, -224, 350479306672958317330671196131255198757282877493027442254346933239808]], ["STORE", 8, 488, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 8, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 8, 224, -224, 350479306672958317330671196131255198757282877493027442254346933239808]], ["STORE", 8, 488, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]]]], [["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 15, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 1, 495, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 15, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 1, 495, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]]]]]]]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]], 0, 352, 100, 352, 32, 228547309, ["DATA", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]], ["MASK_SHL", 64, 0, 0, ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["cd", 4], ["MASK_SHL", 32, 0, 0, ["cd", 4]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]], 13], [["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 8, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 8, 224, -224, 350479306672958317330671196131255198757282877493027442254346933239808]], ["STORE", 8, 488, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 8, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 8, 224, -224, 350479306672958317330671196131255198757282877493027442254346933239808]], ["STORE", 8, 488, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]]]], [["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 15, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["STORE", 1, 495, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], "ext_call.return_data"], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 32, 384, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["STORE", 32, 416, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 15, 480, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 15, 1, -1, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["STORE", 1, 495, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 16, 496, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 240, -240, ["STORAGE", 16, 240, 6, [["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]]], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, "ext_call.return_data"]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]]]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["CALL", ["MUL", 2300, ["ISZERO", ["STORAGE", 256, 0, 14]]], ["MASK_SHL", 160, 0, 0, "CALLER"], ["STORAGE", 256, 0, 14], 864, 0, 864, 0, 0, 0], ["RETURN", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, {"hash": "0x91876e57", "name": "withdrawAuctionBalances()", "color_name": "withdrawAuctionBalances()", "abi_name": "withdrawAuctionBalances()", "shy_memory": false, "length": 2118, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mwithdrawAuctionBalances() : \u001b[38;5;8m# not payable\u001b[0m\n  if \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m != caller:\n      if \u001b[32mceoAddress\u001b[0m != caller:\n          require \u001b[32mcfoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  require ext_code.size(\u001b[32msaleAuctionAddress\u001b[0m)\n  call \u001b[32msaleAuctionAddress\u001b[0m.unknown_0x5fd8c710(?????) with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success\n  require ext_code.size(\u001b[32msiringAuctionAddress\u001b[0m)\n  call \u001b[32msiringAuctionAddress\u001b[0m.unknown_0x5fd8c710(?????) with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success", "trace": [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STOP"]]]]]]]]]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STOP"]]]]]]]]]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 1]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 96, 4, 96, 0, 1608042256, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STOP"]]]]]]]]]]]]]]]]}, {"hash": "0x95d89b41", "name": "symbol()", "color_name": "symbol()", "abi_name": "symbol()", "shy_memory": false, "length": 111, "getter": null, "const": [["DATA", ["MASK_SHL", 256, 0, 0, 32], ["MASK_SHL", 256, 0, 0, 2], ["MASK_SHL", 16, 240, 0, "CK"]]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0msymbol() = \u001b[1m'CK'\u001b[0m", "trace": [["RETURN", ["DATA", ["MASK_SHL", 256, 0, 0, 32], ["MASK_SHL", 256, 0, 0, 2], ["MASK_SHL", 16, 240, 0, "CK"]]]]}, {"hash": "0x9d6fac6f", "name": "cooldowns(uint256 _param1)", "color_name": "cooldowns(uint256 \u001b[32m_param1\u001b[0m)", "abi_name": "cooldowns(uint256)", "shy_memory": false, "length": 221, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcooldowns(uint256 \u001b[32m_param1\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32m_param1\u001b[0m\u001b[1m < \u001b[0m14\n  return \u001b[38;5;8muint32(\u001b[0m(\u001b[32mstor1\u001b[0m\u001b[32m[\u001b[0mMask(253, 3, \u001b[32m_param1\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.768\u001b[0m\u001b[1m / \u001b[0m256^(4\u001b[1m * \u001b[0m(\u001b[32m_param1\u001b[0m\u001b[1m % \u001b[0m8)))\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["GE", ["cd", 4], 14], [["INVALID"]], [["RETURN", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 253, 3, 0, ["cd", 4]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["cd", 4], 8]]]]]]]]]}, {"hash": "0xa45f4bfc", "name": "kittyIndexToOwner(uint256 _param1)", "color_name": "kittyIndexToOwner(uint256 \u001b[32m_param1\u001b[0m)", "abi_name": "kittyIndexToOwner(uint256)", "shy_memory": false, "length": 100, "getter": ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mkittyIndexToOwner(uint256 \u001b[32m_param1\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_param1\u001b[0m\u001b[32m]\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]]]]}, {"hash": "0xa9059cbb", "name": "transfer(address _to, uint256 _value)", "color_name": "transfer(address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m)", "abi_name": "transfer(address,uint256)", "shy_memory": false, "length": 1779, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mtransfer(address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m != \u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\n  require \u001b[32msaleAuctionAddress\u001b[0m != \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[32msiringAuctionAddress\u001b[0m != \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n  \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\n  if caller:\n      \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m - 1\n      \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = 0\n      \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_value\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[38;5;8mlog 0xddf252ad, caller, addr(_to), _value\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 160, 0, 0, "ADDRESS"]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, ["cd", 4]]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", ["MASK_SHL", 160, 0, 0, "CALLER"]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, "CALLER"], ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]], [["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "CALLER"]], ["ADD", 115792089237316195423570985008687907853269984665640564039457584007913129639935, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "CALLER"]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, "CALLER"], ["MASK_SHL", 160, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STOP"]]]]]]]]]]]]]]]]}, {"hash": "0xb047fb50", "name": "cooAddress()", "color_name": "cooAddress()", "abi_name": "cooAddress()", "shy_memory": false, "length": 61, "getter": ["STORAGE", 160, 0, 2], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcooAddress() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]]]]}, {"hash": "0xb0c35c05", "name": "autoBirthFee()", "color_name": "autoBirthFee()", "abi_name": "autoBirthFee()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 256, 0, 14], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mautoBirthFee() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mautoBirthFee\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 14]]]]}, {"hash": "0xbc4006f5", "name": "erc721Metadata()", "color_name": "erc721Metadata()", "abi_name": "erc721Metadata()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 160, 0, 13], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0merc721Metadata() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32merc721MetadataAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 13]]]]}, {"hash": "0xc3bea9af", "name": "createGen0Auction(uint256 _genes)", "color_name": "createGen0Auction(uint256 \u001b[32m_genes\u001b[0m)", "abi_name": "createGen0Auction(uint256)", "shy_memory": false, "length": 7859, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mcreateGen0Auction(uint256 \u001b[32m_genes\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mcooAddress\u001b[0m\u001b[32m.addr\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32mgen0CreatedCount\u001b[0m\u001b[1m < \u001b[0m45000\n  \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m = \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1\n  if not \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m <= \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m + 1):\n      \u001b[94mvar1\u001b[0m = (2\u001b[1m * \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m) + sha3(6) + 2\n      while (sha3(6) + (\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[1m << \u001b[0m256))\u001b[1m > \u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m:\u001b[0m\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = 0\n          \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[94mvar1\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = 0\n          \u001b[94mvar1\u001b[0m = \u001b[94mvar1\u001b[0m + 2\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m = \u001b[32m_genes\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.256\u001b[0m = \u001b[38;5;8muint64(\u001b[0mblock.timestamp\u001b[38;5;8m)\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.96\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.128\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.addr\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.176\u001b[0m = 0\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.0.255\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.192\u001b[0m = 0\n  require \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[1m == \u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[38;5;8m)\u001b[0m\n  \u001b[38;5;8mlog 0xa5311bd2, addr(this.address), stor6.length.0.uint256, 0, 0, _genes\u001b[0m\n  \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m = \u001b[32mbalanceOf\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.uint256\u001b[0m + 1\n  \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[32m]\u001b[0m = \u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\n  \u001b[38;5;8mlog 0xddf252ad, 0, addr(this.address), stor6.length.0.uint256\u001b[0m\n  \u001b[32mkittyIndexToApproved\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\u001b[32m]\u001b[0m = \u001b[32msaleAuctionAddress\u001b[0m\n  require ext_code.size(\u001b[32msaleAuctionAddress\u001b[0m)\n  call \u001b[32msaleAuctionAddress\u001b[0m.3939096908 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n  require ext_call.success\n  require ext_call.return_data\u001b[1m == \u001b[0mext_call.return_data[-16 + RETURNDATASIZE len 16]\n  require ext_code.size(\u001b[32msaleAuctionAddress\u001b[0m)\n  if (ext_call.return_data + ext_call.return_data[-32 + RETURNDATASIZE len 31.875])\u001b[1m < \u001b[0m10000000000000000:\n      call \u001b[32msaleAuctionAddress\u001b[0m.669770762 with:\n           gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n          args \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m, 10000000000000000, 0, 86400, \u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\n  else:\n      call \u001b[32msaleAuctionAddress\u001b[0m.669770762 with:\n           gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n          args \u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m, (ext_call.return_data + ext_call.return_data[-32 + RETURNDATASIZE len 31.875]), 0, 86400, \u001b[38;5;8maddr(\u001b[0mthis.address\u001b[38;5;8m)\u001b[0m\n  require ext_call.success\n  \u001b[32mgen0CreatedCount\u001b[0m = \u001b[32mgen0CreatedCount\u001b[0m + 1", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 2]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["GE", ["STORAGE", 256, 0, 18], 45000], [["REVERT", 0]], [["STORE", 256, 0, 6, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["IF", ["GT", ["ISZERO", ["STORAGE", 256, 0, 6]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], [["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, "ADDRESS"], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "ADDRESS"]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "ADDRESS"]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, "ADDRESS"]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, "ADDRESS"], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]], ["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 4, 608, 32, 3939096908, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", "ext_call.return_data", ["MASK_SHL", 128, 0, 0, "ext_call.return_data"]]], [["REVERT", 0]], [["IF", ["LT", ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["MASK_SHL", 255, 1, -1, "ext_call.return_data"]]], 10000000000000000], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 164, 608, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 10000000000000000], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 86400], ["MASK_SHL", 160, 0, 0, "ADDRESS"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STORE", 256, 0, 18, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 18]]]], ["STOP"]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 164, 608, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["MASK_SHL", 255, 1, -1, "ext_call.return_data"]]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 86400], ["MASK_SHL", 160, 0, 0, "ADDRESS"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STORE", 256, 0, 18, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 18]]]], ["STOP"]]]]]]]]]]]]]]]], [["setvar", 1, ["ADD", 2, ["MUL", 2, ["STORAGE", 256, 0, 6]], ["MUL", 1, ["SHA3", ["MASK_SHL", 256, 0, 0, 6]]]]], ["WHILE", ["GT", ["ADD", ["SHA3", ["MASK_SHL", 256, 0, 0, 6]], ["MASK_SHL", 255, 0, 1, ["STORAGE", 255, 0, 6]]], ["var", 1]], [["STORE", 256, 0, 2, [["var", 1]], 0], ["STORE", 256, 256, 2, [["var", 1]], 0], ["setvar", 1, ["ADD", 2, ["MUL", 1, ["var", 1]]]]]], ["STORE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["cd", 4]], ["STORE", 64, 256, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], ["MASK_SHL", 64, 0, 0, "TIMESTAMP"]], ["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 96, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 128, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 160, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 176, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["STORE", 192, 320, 6, [["MASK_SHL", 255, 0, 0, ["STORAGE", 255, 0, 6]]], 0], ["IF", ["ISZERO", ["EQ", ["MUL", 1, ["STORAGE", 256, 0, 6]], ["MASK_SHL", 32, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]]], [["REVERT", 0]], [["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, "ADDRESS"], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, ["cd", 4]]], 4669899221792176295829880153957679903342862844638429737408141226036653525717], ["STORE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "ADDRESS"]], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 8, [["MASK_SHL", 160, 0, 0, "ADDRESS"]]]]]], ["STORE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, "ADDRESS"]], ["LOG", ["DATA", ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 160, 0, 0, "ADDRESS"], ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], 100389287136786176327247604509743168900146139575972864366142685224231313322991], ["STORE", 160, 0, 9, [["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]], ["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 4, 608, 32, 3939096908, 0], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", "ext_call.return_data", ["MASK_SHL", 128, 0, 0, "ext_call.return_data"]]], [["REVERT", 0]], [["IF", ["LT", ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["MASK_SHL", 255, 1, -1, "ext_call.return_data"]]], 10000000000000000], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 164, 608, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, 10000000000000000], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 86400], ["MASK_SHL", 160, 0, 0, "ADDRESS"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STORE", 256, 0, 18, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 18]]]], ["STOP"]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], 0, 608, 164, 608, 0, 669770762, ["DATA", ["MASK_SHL", 256, 0, 0, ["MUL", 1, ["STORAGE", 256, 0, 6]]], ["MASK_SHL", 256, 0, 0, ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["MASK_SHL", 255, 1, -1, "ext_call.return_data"]]]], ["MASK_SHL", 256, 0, 0, 0], ["MASK_SHL", 256, 0, 0, 86400], ["MASK_SHL", 160, 0, 0, "ADDRESS"]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["STORE", 256, 0, 18, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 18]]]], ["STOP"]]]]]]]]]]]]]]]]]]]]]]}, {"hash": "0xd3e6f49f", "name": "isReadyToBreed(uint256 _EtherDogId)", "color_name": "isReadyToBreed(uint256 \u001b[32m_EtherDogId\u001b[0m)", "abi_name": "isReadyToBreed(uint256)", "shy_memory": false, "length": 507, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0misReadyToBreed(uint256 \u001b[32m_EtherDogId\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32m_EtherDogId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m:\n      return not bool(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m)\n  return \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_EtherDogId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m <= \u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["ISZERO", ["BOOL", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]], [["RETURN", ["MASK_SHL", 256, 0, 0, ["ISZERO", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]]]]]]]]]]}, {"hash": "0xdefb9584", "name": "PROMO_CREATION_LIMIT()", "color_name": "PROMO_CREATION_LIMIT()", "abi_name": "PROMO_CREATION_LIMIT()", "shy_memory": false, "length": 43, "getter": null, "const": [["MASK_SHL", 256, 0, 0, 5000]], "is_spaghetti": false, "print": "\u001b[95mconst \u001b[0mPROMO_CREATION_LIMIT() = \u001b[1m5000\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, 5000]]]}, {"hash": "0xe17b25af", "name": "setMetadataAddress(address _contractAddress)", "color_name": "setMetadataAddress(address \u001b[32m_contractAddress\u001b[0m)", "abi_name": "setMetadataAddress(address)", "shy_memory": false, "length": 205, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msetMetadataAddress(address \u001b[32m_contractAddress\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32mceoAddress\u001b[0m\u001b[1m == \u001b[0mcaller\n  \u001b[32merc721MetadataAddress\u001b[0m = \u001b[38;5;8maddr(\u001b[0m\u001b[32m_contractAddress\u001b[0m\u001b[38;5;8m)\u001b[0m", "trace": [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 0]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STORE", 160, 0, 13, [], ["MASK_SHL", 160, 0, 0, ["cd", 4]]], ["STOP"]]]]}, {"hash": "0xe6cbe351", "name": "saleAuction()", "color_name": "saleAuction()", "abi_name": "saleAuction()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 160, 0, 11], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0msaleAuction() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32msaleAuctionAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]]]]}, {"hash": "0xe98b7f4d", "name": "getKitty(uint256 _id)", "color_name": "getKitty(uint256 \u001b[32m_id\u001b[0m)", "abi_name": "getKitty(uint256)", "shy_memory": false, "length": 1089, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mgetKitty(uint256 \u001b[32m_id\u001b[0m) : \u001b[38;5;8m# not payable\u001b[0m\n  require \u001b[32m_id\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  return 0 != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m, \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m <= block.number, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m << \u001b[0m16), (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m << \u001b[0m64), (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\u001b[1m << \u001b[0m32), \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.0.uint64\u001b[0m, (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\u001b[1m << \u001b[0m32), (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\u001b[1m << \u001b[0m32), (\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.240\u001b[0m\u001b[1m << \u001b[0m16), \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_id\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.0.uint256\u001b[0m", "trace": [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["RETURN", ["DATA", ["MASK_SHL", 256, 0, 0, ["ISZERO", ["EQ", 0, ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]], ["MASK_SHL", 256, 0, 0, ["ISZERO", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], "NUMBER"]]], ["MASK_SHL", 16, 224, 0, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 64, 0, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 192, 0, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, ["STORAGE", 64, 0, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 128, 0, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 160, 0, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 16, 240, 0, ["STORAGE", 16, 240, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]]]}, {"hash": "0xed60ade6", "name": "bidOnSiringAuction(uint256 _sireId, uint256 _matronId)", "color_name": "bidOnSiringAuction(uint256 \u001b[32m_sireId\u001b[0m, uint256 \u001b[32m_matronId\u001b[0m)", "abi_name": "bidOnSiringAuction(uint256,uint256)", "shy_memory": false, "length": 25054, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mbidOnSiringAuction(uint256 \u001b[32m_sireId\u001b[0m, uint256 \u001b[32m_matronId\u001b[0m) \u001b[95mpayable\u001b[0m: \u001b[38;5;8m\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require not \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m <= \u001b[0m\u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[32m_sireId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32m_sireId\u001b[0m\n  require \u001b[32m_sireId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n  require \u001b[32m_sireId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n      if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  require ext_code.size(\u001b[32msiringAuctionAddress\u001b[0m)\n  call \u001b[32msiringAuctionAddress\u001b[0m.3311210326 with:\n       gas gas_remaining - 710 \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32m_sireId\u001b[0m\n  require ext_call.success\n  require call.value\u001b[1m >= \u001b[0m(ext_call.return_data + \u001b[32mautoBirthFee\u001b[0m)\n  require ext_code.size(\u001b[32msiringAuctionAddress\u001b[0m)\n  call \u001b[32msiringAuctionAddress\u001b[0m.1162488499 with:\n       gas gas_remaining - 9710 \u001b[38;5;8mwei\u001b[0m\n     value call.value - \u001b[32mautoBirthFee\u001b[0m \u001b[38;5;8mwei\u001b[0m\n      args \u001b[32m_sireId\u001b[0m\n  require ext_call.success\n  require \u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.448\u001b[0m = \u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m14\n  require \u001b[32msecondsPerBlock\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = \u001b[38;5;8muint64(\u001b[0m((\u001b[38;5;8muint32(\u001b[0m(\u001b[32mstor1\u001b[0m\u001b[32m[\u001b[0m(storage(13, 227, 6, uint32(_sireId))\u001b[1m << \u001b[0m13)\u001b[32m]\u001b[0m\u001b[32m.768\u001b[0m\u001b[1m / \u001b[0m256^(4\u001b[1m * \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m % \u001b[0m8)))\u001b[38;5;8m)\u001b[0m\u001b[1m / \u001b[0m\u001b[32msecondsPerBlock\u001b[0m) + block.number)\u001b[38;5;8m)\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m13:\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.uint16\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m14\n  require \u001b[32msecondsPerBlock\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = \u001b[38;5;8muint64(\u001b[0m((\u001b[38;5;8muint32(\u001b[0m(\u001b[32mstor1\u001b[0m\u001b[32m[\u001b[0m(storage(13, 227, 6, uint32(_matronId))\u001b[1m << \u001b[0m13)\u001b[32m]\u001b[0m\u001b[32m.768\u001b[0m\u001b[1m / \u001b[0m256^(4\u001b[1m * \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m % \u001b[0m8)))\u001b[38;5;8m)\u001b[0m\u001b[1m / \u001b[0m\u001b[32msecondsPerBlock\u001b[0m) + block.number)\u001b[38;5;8m)\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m13:\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.480.uint16\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[32mpregnantKitties\u001b[0m = \u001b[32mpregnantKitties\u001b[0m + 1\n  \u001b[38;5;8mlog 0x241ea03c, ownerOf[uint32(_matronId)], uint32(_matronId), uint32(_sireId), uint64(((uint32((stor1[(storage(13, 227, 6, uint32(_matronId)) << 13)].768 / 256^(4 * (stor6[uint32(_matronId)].224 % 8)))) / secondsPerBlock) + block.number))\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["EQ", ["cd", 36], ["cd", 4]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 352, 36, 352, 32, 3311210326, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["LT", "CALLVALUE", ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["STORAGE", 256, 0, 14]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -9710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], ["ADD", ["MUL", 1, "CALLVALUE"], ["MUL", -1, ["STORAGE", 256, 0, 14]]], 352, 36, 352, 0, 1162488499, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]]]]]]]]]]]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 352, 36, 352, 32, 3311210326, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["LT", "CALLVALUE", ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["STORAGE", 256, 0, 14]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -9710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], ["ADD", ["MUL", 1, "CALLVALUE"], ["MUL", -1, ["STORAGE", 256, 0, 14]]], 352, 36, 352, 0, 1162488499, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]]]]]]]]]]]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], 0, 352, 36, 352, 32, 3311210326, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["LT", "CALLVALUE", ["ADD", ["MUL", 1, "ext_call.return_data"], ["MUL", 1, ["STORAGE", 256, 0, 14]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["EXTCODESIZE", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]]]], [["REVERT", 0]], [["CALL", ["ADD", -9710, ["MUL", 1, "GAS"]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], ["ADD", ["MUL", 1, "CALLVALUE"], ["MUL", -1, ["STORAGE", 256, 0, 14]]], 352, 36, 352, 0, 1162488499, ["MASK_SHL", 256, 0, 0, ["cd", 4]]], ["IF", ["ISZERO", "ext_call.success"], [["REVERT", 0]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 4]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 36]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 32, 0, 0, ["cd", 4]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]], ["MASK_SHL", 32, 0, 0, ["cd", 4]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 32, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, {"hash": "0xf1ca9410", "name": "gen0CreatedCount()", "color_name": "gen0CreatedCount()", "abi_name": "gen0CreatedCount()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 256, 0, 18], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mgen0CreatedCount() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mgen0CreatedCount\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 256, 0, 0, ["STORAGE", 256, 0, 18]]]]}, {"hash": "0xf2b47d52", "name": "geneScience()", "color_name": "geneScience()", "abi_name": "geneScience()", "shy_memory": false, "length": 62, "getter": ["STORAGE", 160, 0, 16], "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0mgeneScience() : \u001b[38;5;8m# not payable\u001b[0m\n  return \u001b[32mgeneScienceAddress\u001b[0m", "trace": [["RETURN", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 16]]]]}, {"hash": "0xf7d8c883", "name": "breedWithAuto(uint256 _matronId, uint256 _sireId)", "color_name": "breedWithAuto(uint256 \u001b[32m_matronId\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m)", "abi_name": "breedWithAuto(uint256,uint256)", "shy_memory": false, "length": 45528, "getter": null, "const": null, "is_spaghetti": true, "print": "\u001b[95mdef \u001b[0mbreedWithAuto(uint256 \u001b[32m_matronId\u001b[0m, uint256 \u001b[32m_sireId\u001b[0m) \u001b[95mpayable\u001b[0m: \u001b[38;5;8m\u001b[0m\n  require not \u001b[32mstor2\u001b[0m\u001b[32m.160\u001b[0m\n  require call.value\u001b[1m >= \u001b[0m\u001b[32mautoBirthFee\u001b[0m\n  require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0mcaller\n  if \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m != \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m:\n      require \u001b[32mownerOf\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m\u001b[1m == \u001b[0m\u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require not \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m <= \u001b[0m\u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m\n  require \u001b[32m_sireId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require not \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.192\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.64\u001b[0m\u001b[1m <= \u001b[0m\u001b[38;5;8muint64(\u001b[0mblock.number\u001b[38;5;8m)\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32m_sireId\u001b[0m\n  require \u001b[32m_sireId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n  require \u001b[32m_sireId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n  require \u001b[32m_matronId\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n      if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m:\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.128\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n          require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m != \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.160\u001b[0m\n  require \u001b[32m_sireId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  require \u001b[32m_matronId\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor6\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m.0.uint256\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.448\u001b[0m = \u001b[38;5;8muint32(\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m14\n  require \u001b[32msecondsPerBlock\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = \u001b[38;5;8muint64(\u001b[0m((\u001b[38;5;8muint32(\u001b[0m(\u001b[32mstor1\u001b[0m\u001b[32m[\u001b[0m(storage(13, 227, 6, Mask(255, 0, _sireId))\u001b[1m << \u001b[0m13)\u001b[32m]\u001b[0m\u001b[32m.768\u001b[0m\u001b[1m / \u001b[0m256^(4\u001b[1m * \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m % \u001b[0m8)))\u001b[38;5;8m)\u001b[0m\u001b[1m / \u001b[0m\u001b[32msecondsPerBlock\u001b[0m) + block.number)\u001b[38;5;8m)\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m13:\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.480.uint16\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_sireId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  require \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m14\n  require \u001b[32msecondsPerBlock\u001b[0m\n  \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.320.uint64\u001b[0m = \u001b[38;5;8muint64(\u001b[0m((\u001b[38;5;8muint32(\u001b[0m(\u001b[32mstor1\u001b[0m\u001b[32m[\u001b[0m(storage(13, 227, 6, Mask(255, 0, _matronId))\u001b[1m << \u001b[0m13)\u001b[32m]\u001b[0m\u001b[32m.768\u001b[0m\u001b[1m / \u001b[0m256^(4\u001b[1m * \u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m % \u001b[0m8)))\u001b[38;5;8m)\u001b[0m\u001b[1m / \u001b[0m\u001b[32msecondsPerBlock\u001b[0m) + block.number)\u001b[38;5;8m)\u001b[0m\n  if \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m\u001b[1m < \u001b[0m13:\n      \u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.480.uint16\u001b[0m = \u001b[38;5;8muint16(\u001b[0m(\u001b[32mstor6\u001b[0m\u001b[32m[\u001b[0mMask(255, 0, \u001b[32m_matronId\u001b[0m)\u001b[32m]\u001b[0m\u001b[32m.224\u001b[0m + 1)\u001b[38;5;8m)\u001b[0m\n  \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_matronId\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[32msireAllowedToAddress\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_sireId\u001b[0m\u001b[32m]\u001b[0m = 0\n  \u001b[32mpregnantKitties\u001b[0m = \u001b[32mpregnantKitties\u001b[0m + 1\n  \u001b[38;5;8mlog 0x241ea03c, ownerOf[_matronId], _matronId, _sireId, uint64(((uint32((stor1[(storage(13, 227, 6, Mask(255, 0, _matronId)) << 13)].768 / 256^(4 * (stor6[Mask(255, 0, _matronId)].224 % 8)))) / secondsPerBlock) + block.number))\u001b[0m", "trace": [["IF", ["BOOL", ["MASK_SHL", 8, 160, -160, ["STORAGE", 8, 160, 2]]], [["REVERT", 0]], [["IF", ["LT", "CALLVALUE", ["STORAGE", 256, 0, 14]], [["REVERT", 0]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["cd", 36]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]]]]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["MASK_SHL", 32, 192, -192, ["STORAGE", 32, 192, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], [["REVERT", 0]], [["IF", ["GT", ["MASK_SHL", 64, 64, -64, ["STORAGE", 64, 64, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 64, 0, 0, "NUMBER"]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["cd", 36]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 36], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["cd", 4], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]], [["IF", ["ISZERO", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 128, -128, ["STORAGE", 32, 128, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]], [["REVERT", 0]], [["IF", ["EQ", ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], ["MASK_SHL", 32, 160, -160, ["STORAGE", 32, 160, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]], [["REVERT", 0]], [["IF", ["GE", ["cd", 36], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["IF", ["GE", ["cd", 4], ["STORAGE", 256, 0, 6]], [["INVALID"]], [["STORE", 32, 448, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 32, 0, 0, ["cd", 36]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]], 13], [["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 36]]]]]]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 14], [["INVALID"]], [["IF", ["ISZERO", ["STORAGE", 256, 0, 5]], [["INVALID"]], [["STORE", 64, 320, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], ["IF", ["GE", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 13], [["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]], [["STORE", 16, 480, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]], ["MASK_SHL", 16, 0, 0, ["ADD", 1, ["MUL", 1, ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]]]], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 4]]], 0], ["STORE", 160, 0, 10, [["MASK_SHL", 256, 0, 0, ["cd", 36]]], 0], ["STORE", 256, 0, 15, [], ["ADD", 1, ["MUL", 1, ["STORAGE", 256, 0, 15]]]], ["LOG", ["DATA", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 7, [["MASK_SHL", 256, 0, 0, ["cd", 4]]]]], ["MASK_SHL", 256, 0, 0, ["cd", 4]], ["MASK_SHL", 256, 0, 0, ["cd", 36]], ["MASK_SHL", 64, 0, 0, ["ADD", ["MUL", 1, ["DIV", ["MASK_SHL", 32, 0, 0, ["DIV", ["STORAGE", 256, 768, 1, [["MASK_SHL", 13, 227, 0, ["STORAGE", 13, 227, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]]]], ["EXP", 256, ["MASK_SHL", 254, 0, 2, ["MOD", ["MASK_SHL", 16, 224, -224, ["STORAGE", 16, 224, 6, [["MASK_SHL", 255, 0, 0, ["cd", 4]]]]], 8]]]]], ["STORAGE", 256, 0, 5]]], ["MUL", 1, "NUMBER"]]]], 16337373875014773000581394022545001100213765116096959649602772280587682155392], ["STOP"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, {"hash": "_fallback()", "name": "_fallback()", "color_name": "_fallback()", "abi_name": null, "shy_memory": false, "length": 259, "getter": null, "const": null, "is_spaghetti": false, "print": "\u001b[95mdef \u001b[0m_fallback() \u001b[95mpayable\u001b[0m: \u001b[38;5;8m# default function\u001b[0m\n  if \u001b[32msaleAuctionAddress\u001b[0m != caller:\n      require \u001b[32msiringAuctionAddress\u001b[0m\u001b[1m == \u001b[0mcaller", "trace": [["IF", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 11]], ["MASK_SHL", 160, 0, 0, "CALLER"]], [["STOP"]], [["IF", ["ISZERO", ["EQ", ["MASK_SHL", 160, 0, 0, ["STORAGE", 160, 0, 12]], ["MASK_SHL", 160, 0, 0, "CALLER"]]], [["REVERT", 0]], [["STOP"]]]]]]}]}